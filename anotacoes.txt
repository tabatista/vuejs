Comando para inicializar um projeto do Vue num diretório:

vue init webpack-simple

------------------
Obs.:

Babel: transpiler
Webpack: module bundler
live reloading: recurso do servidor para refletir imediatamente qualquer alteração em algum arquivo nosso no navegador
------------------
{{ variavel }} : interpolação, dentro da tag script do componente existe a função data, que retorna um objeto javascript com propriedades, que são acessíveis através do template em data-binding unidirecional (da fonte de dados - script - para o template).
-----------------
O router-view serve para indicar para o template da página principal da aplicação o local no qual os demais componentes carregados através de rotas devem ser renderizados.

Exemplo:

<template>
...
	<div>{{ msg }}}</div>
</template>

<script>
export default {
  name: 'app',
  data () {
    return {
      msg: 'Hello World'
    }
  }
}
</script>
------------------------------
Dentro do template é obrigatório envolver as tags dentro de uma tag container (uma div, por exemplo): uma tag pai que tenha filhos, é uma exigência do Vue.
------------------------------
Associar dado a atributo:

Dentro de atributos default html não podemos utilizar interpolação. Quando queremos utilizar disso, temo que usar a diretiva "v-bind:" antes de um atributo em uma tag html (tendo o conceito de data-binding).

Exemplo:

De:  <img src="{{ foto.url }}">
Para: <img v-bind:src="foto.url">

Inclusive, para a sintaxe ficar mais enxuta, podemos tirar o "v-bind", deixando apenas os dois pontos, ficando:

<img :src="foto.url">
-------------------------------
Se não quisermos usar interpolação e dar um conteúdo texto para uma tag, podemos usar a diretiva "v-text".

Exemplo:

De: <h1> {{ titulo }} </h1>
Para: <h1 v-text="titulo"></h1>
-------------------------------
A diretiva v-for pode ser usada com f ou in
-------------------------------
API na pasta "api", feita em node... npm start para inicilizar a API

Enpoint das fotos: localhost:3000/v1/fotos
-------------------------------
Registramos o módulo do vue-resource para consumo de API no main.js, com o uso de um de seus artefatos (o $http)
------------------
Lifecycle hooks (gancho do ciclo de vida de um componente): o componente quando é criado ele passa por etapas, e em cada etapa dessa ele me permite executar um código.

Uma etapa interessante desse ciclo de vida:

Created: função chamada assim que o componente é criado.
------------
É uma boa prática criar os componentes dentro da pasta "components" em src. 

Os componentes compartilhados/reutilizados devem ficar dentro da pasta "shared", dentro uma subpasta com o nome do componente.
-------------
É possível criar uma propriedade bind para o próprio componente e preenchê-la em outro componente ao importá-lo e utilizá-lo.
-------------
Para o estilo do componente não ser universal, basta na tag style inserir a proriedade scoped, logo o estilo pertence somente ao componente. É uma boa prática colocar o scoped em todo componente criado
----------
Diretiva v-on:input -> "v-on" para indicar em qual evento: no caso do input, onde informamos a variável declarada na função data() e o que ela recebe.

exemplo:

v-on:inpit"filtro = $event.target.value";

o $event é um objeto especial do Vue.js que sabe tudo sobre o evento disparado (no caso, o evento input), com o target (alvo) de quem disparou o evento e seu value (valor do input - do que foi digitado).

Isso é um data-binding da view pra fonte dados (data()).

A diretiva v-bind realiza uma associação que flui da fonte de dados para a view. Qualquer mudança na fonte de dados fará com que a view seja atualizada para representar o novo valor.

A diretiva v-on realiza uma associação de evento que flui da view para a fonte de dados. Qualquer mudança na fonte de dados atualizará a view associada a ela, contanto que haja uma associação através de v-bind.
( Para que as mudanças realizadas por v-on sejam atualizadas na view, é necessário combinar v-on com v-bind.)
--------------------
Diretiva v-show: se passamos o valor false, ele ganha por debaixo dos panos o display "none", mas se for true o elemento é exibido... Não pode ser declarado no slot diretamente, usa-se uma div se necessário
--------------------
O atalho para v-on é o @.

Exemplo:

De: v-on:click
Para: @click

Ou seja, os dois pontos : é o atalho do data-bind da fonte de dados para a view e o @ pé o data-bind da view para a fonte de dados.