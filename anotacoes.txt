Comando para inicializar um projeto do Vue num diretório:

vue init webpack-simple

------------------
Obs.:

Babel: transpiler
Webpack: module bundler
live reloading: recurso do servidor para refletir imediatamente qualquer alteração em algum arquivo nosso no navegador
------------------
{{ variavel }} : interpolação, dentro da tag script do componente existe a função data, que retorna um objeto javascript com propriedades, que são acessíveis através do template em data-binding unidirecional (da fonte de dados - script - para o template).

Exemplo:

<template>
...
	<div>{{ msg }}}</div>
</template>

<script>
export default {
  name: 'app',
  data () {
    return {
      msg: 'Hello World'
    }
  }
}
</script>
------------------------------
Dentro do template é obrigatório envolver as tags dentro de uma tag container (uma div, por exemplo): uma tag pai que tenha filhos, é uma exigência do Vue.
------------------------------
Associar dado a atributo:

Dentro de atributos default html não podemos utilizar interpolação. Quando queremos utilizar disso, temo que usar a diretiva "v-bind:" antes de um atributo em uma tag html (tendo o conceito de data-binding).

Exemplo:

De:  <img src="{{ foto.url }}">
Para: <img v-bind:src="foto.url">

Inclusive, para a sintaxe ficar mais enxuta, podemos tirar o "v-bind", deixando apenas os dois pontos, ficando:

<img :src="foto.url">
-------------------------------
Se não quisermos usar interpolação e dar um conteúdo texto para uma tag, podemos usar a diretiva "v-text".

Exemplo:

De: <h1> {{ titulo }} </h1>
Para: <h1 v-text="titulo"></h1>
-------------------------------
A diretiva v-for pode ser usada com f ou in
-------------------------------
API na pasta "api", feita em node... npm start para inicilizar a API

Enpoint das fotos: localhost:3000/v1/fotos
-------------------------------
Registramos o módulo do vue-resource para consumo de API no main.js, com o uso de um de seus artefatos (o $http)
------------------
Lifecycle hooks (gancho do ciclo de vida de um componente): o componente quando é criado ele passa por etapas, e em cada etapa dessa ele me permite executar um código.

Uma etapa interessante desse ciclo de vida:

Created: função chamada assim que o componente é criado.
